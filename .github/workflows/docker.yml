name: Chatwoot Docker Build & Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY_URL: '91.98.136.233:30501'
  IMAGE_NAME: 'chatwoot'

# Security: Restrict permissions for GITHUB_TOKEN
permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  build:
    name: 🐳 Build Chatwoot Docker Image
    runs-on: ubuntu-latest-4-cores  # 16GB RAM, 4 cores - $0.016/minute
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        config-inline: |
          [registry."91.98.136.233:30501"]
            http = true
            insecure = true
            
    - name: 🔧 Configure Docker for Insecure Registry
      run: |
        echo '🔧 Configuring Docker daemon for insecure registry...'
        sudo mkdir -p /etc/docker
        echo '{
          "insecure-registries": ["91.98.136.233:30501"],
          "max-concurrent-downloads": 3,
          "max-concurrent-uploads": 5
        }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        echo '✅ Docker configured for insecure registry'
        
    - name: 🔧 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=chatwoot-{{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=production,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Chatwoot Customer Support
          org.opencontainers.image.description=Open-source customer engagement suite
          org.opencontainers.image.vendor=Chatwoot
          org.opencontainers.image.licenses=MIT
    
    - name: 🏗️ Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.optimized
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        build-args: |
          RAILS_ENV=production
          BUNDLE_WITHOUT=development:test
          NODE_OPTIONS=--max-old-space-size=6144
          
    - name: 📋 Image Build Summary
      run: |
        echo "🐳 Chatwoot Docker Build completed successfully!"
        echo "📋 Build Details:"
        echo "   • Image Digest: ${{ steps.build.outputs.digest }}"
        echo "   • Tags: ${{ steps.meta.outputs.tags }}"
        echo "   • Registry: 91.98.136.233:30501"
        echo "   • Platform: linux/amd64"

  # Job 2: Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔒 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
        
      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
        
      - name: 🔍 Container Security Summary
        run: |
          echo "🔒 Security scan completed"
          echo "📋 Security report uploaded to GitHub Security tab"

  # Job 3: Notify Results
  notify:
    name: 📢 Notify Build Results
    runs-on: ubuntu-latest
    needs: [build, security]
    if: always()
    
    steps:
      - name: 📢 Build Success Notification
        if: needs.build.result == 'success'
        run: |
          echo "🎉 Chatwoot Docker build completed successfully!"
          echo ""
          echo "✅ Pipeline Results:"
          echo "   🐳 Build: ${{ needs.build.result }}"
          echo "   🔒 Security: ${{ needs.security.result }}"
          echo ""
          echo "🐳 Your Chatwoot image is ready at: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest"
          echo "📊 Image size and details available in build logs"
          echo ""
          echo "📋 Build Summary:"
          echo "   • Repository: ${{ github.repository }}"
          echo "   • Branch: ${{ github.ref_name }}"
          echo "   • Commit: ${{ github.sha }}"
          echo "   • Actor: ${{ github.actor }}"
          echo "   • Workflow: ${{ github.workflow }}"
          echo "   • Environment: ${{ github.event.inputs.environment || 'production' }}"
          
      - name: 📢 Build Failure Notification
        if: needs.build.result == 'failure'
        run: |
          echo "❌ Chatwoot Docker build failed!"
          echo ""
          echo "📊 Pipeline Results:"
          echo "   🐳 Build: ${{ needs.build.result }}"
          echo "   🔒 Security: ${{ needs.security.result }}"
          echo ""
          echo "🔍 Troubleshooting:"
          echo "   • Check the failed job logs above"
          echo "   • Verify Docker build context and dependencies"
          echo "   • Check for memory issues (Node.js heap)"
          echo "   • Verify registry connectivity: ${{ env.REGISTRY_URL }}"
          echo "   • Review security scan results if available"
          echo ""
          echo "🔗 Full logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
